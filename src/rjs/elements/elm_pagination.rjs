import "ElmCards", "./elm_cards" 

export default class ElmPagination < HTMLElement
  INIT   = "eph_init"
  SELECT = "eph_select"

  def initialize
    super
    @h_init_elm = lambda { |d| init_elm(d.detail.data) }
    @h_load_elm = lambda { |d| change_mode(!d.detail.is_beginning) }
  end

  def connectedCallback()
    document.addEventListener(INIT, @h_init_elm)
    document.addEventListener(ElmCards::LOAD_PROCESS, @h_load_elm)
  end

  def disconnectedCallback()
    document.removeEventListener(INIT, @h_init_elm)
    document.removeEventListener(ElmCards::LOAD_PROCESS, @h_load_elm)
  end

  def init_elm(rows)
    pages_count = Math.ceil(rows / ElmCards::CARDS_MAX)
    l_select = lambda do
      result = ""
      (1..pages_count).step(1) do |i|
        result += "<option value='#{i}'>#{i}</option>\n"
      end
      return result
    end
    template = """
    <div id='page-mode' class='invisible'>
      <nav aria-label='Standard pagination' class='d-flex justify-content-center'>
        <ul class='pagination'>
          <li class='page-item list-inline-item'>
          <button type='button' class='btn btn-light' onclick='page_select_previous()'>Previous</button>
          </li>
          <li class='page-item list-inline-item'>
            <select class='form-select' id='page-select' onchange='page_select_change()'>
              #{l_select.call()}
            </select>
          </li>
          <li class='page-item list-inline-item'>
            <button type='button' class='btn btn-light' onclick='page_select_next()'>Next</button>
          </li>
        </ul>
      </nav>
    </div>
    """

    self.innerHTML = template
    @page_mode = document.getElementById('page-mode')
    @page_select = document.getElementById('page-select')

    window.page_select_change = page_select_change 
    window.page_select_previous = page_select_previous
    window.page_select_next = page_select_next
  end

  def change_mode(is_visible)
    unless @page_mode
      return
    end

    if is_visible
      @page_mode.className = "visible"
    else
      @page_mode.className = "invisible"
    end
  end

  def page_select_change()
    elm_select = document.getElementById('page-select')
    event = new CustomEvent(SELECT, {
      detail: {
        value: parseInt(elm_select.value)
      }
    })
    document.dispatchEvent(event)
  end

  def page_select_previous()
    value = parseInt(@page_select.value) - 1
    if value > 0
      @page_select.value = value
      @page_select.onchange()
    end
  end

  def page_select_next()
    value = parseInt(@page_select.value) + 1
    if value <= @page_select.length
      @page_select.value = value
      @page_select.onchange()
    end
  end
end