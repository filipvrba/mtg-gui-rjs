export default class ElmCards < HTMLElement
  INIT = "ecsh_init"
  LOAD_PROCESS = "ecsh_load_p"
  INIT_PROCESS = "ecsh_init_p"

  CARDS_MAX = 100

  def initialize
    super

    @h_init_elm = lambda { |e| init_elm(e.detail.data) }
    @h_init_process = lambda { load_process() }
  end

  def connectedCallback()
    document.addEventListener(INIT, @h_init_elm)
    document.addEventListener(INIT_PROCESS, @h_init_process)
  end

  def disconnectedCallback()
    document.removeEventListener(INIT, @h_init_elm)
    document.removeEventListener(INIT_PROCESS, @h_init_process)
  end

  def init_elm(data)
    l_tbody = lambda do
      result = ""
      (0...data.length).step(1) do |i| card = data[i]
        s_td = """
        <tr>
          <th scope='row' class='text-start'>
            <a href='#' onclick='click_select_card(#{i})'>#{card.name}</a>
          </th>
          <th scope='row' class='text-center'>#{card.types}</th>
          <th scope='row' class='text-center'>#{card.colorIdentity}</th>
          <th scope='row' class='text-center'>#{card.manaCost}</th>
        </tr>
        """
        result += "#{s_td}\n"
      end
      return result
    end

    template = """
      <div class='text-center'>
        <h2 class='h2'>No cards found</h2>
      </div>
    """
    if data.length > 0
      template = """
        <div class='table-responsive'>
          <table class='table text-center'>
            <thead>
              <tr>
                <th style='width: 31%;'></th>
                <th style='width: 22%;'>Type</th>
                <th style='width: 22%;'>Color</th>
                <th style='width: 22%;'>Cast</th>
              </tr>
            </thead>
            <tbody>
              #{l_tbody.call()}
            </tbody>
          </table>
        </div>
      """

      load_process_event(false)
    end

    self.innerHTML = template
  end

  def load_process()
    template = """
    <div class='d-flex justify-content-center'>
      <div class='spinner-border text-primary' role='status'>
        <span class='visually-hidden'>Loading...</span>
      </div>
    </div>
    """

    self.innerHTML = template
    load_process_event(true)
  end

  def load_process_event(is_beginning)
    event = new CustomEvent(LOAD_PROCESS, {
      detail: {
        is_beginning: is_beginning
      }
    })
    document.dispatchEvent(event)
  end
end
